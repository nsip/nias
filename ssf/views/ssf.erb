<!-- ssf.erb -->

<% content_for :title do %>
      <title>NIAS SSF : Store & Forward</title>
<% end %>

<div class="container">
  
	<!-- header -->
    <section class="header">
    	<!-- <img class="value-img" src="images/watch.svg"> -->
    	<img class="value-img" src="images/mail.svg" width="160" height="160">
    	<!-- <img class="value-img" src="images/deadlines.svg" width="132" height="132"> -->
        <div class="row">
        	<div class="twelve columns" style="margin-top: 5%">
                <h4>NIAS - SSF</h4>
                <p>SIF Store + Forward</p>
            </br></br></br>
            </div>
        </div>
    </section>

    <!-- navigation -->                 
    <div class="navbar-spacer"></div>
    <nav class="navbar">        
        <div class="container">
            <ul class="navbar-list">
                                 
                <li class="navbar-item"><a class="navbar-link" href="#server_info">Server Info</a></li>
                <li class="navbar-item"><a class="navbar-link" href="#upload">Upload File</a></li>
                                
            </ul>
        </div>      
    </nav>

    <!-- known topics list -->
    <div class="docs-section" id="server_info"> 
		<h6 class="docs-header">Server Details...</h6>

		<div class="row">
    		<div class="seven columns" id="collection_text">
    			<h6 class="docs-header">SSF Server</h6>
				<div><ul>

					<li>Name: <%= env['SERVER_NAME'] %></li>
					<li>Port: <%= env['SERVER_PORT'] %></li>
					<li>Environment: <%= settings.environment %></li>

				</ul></div>
    		</div>

    		<div class="five columns" id="topics_list">
    			<h6 class="docs-header">Known Topics:</h6>
				<div><ul>

						<% @topics.each do | topic | %>
							<li><a href="<%= topic %>"><%= topic %></a></li>
						<% end %>

				</ul></div>	
    		</div>
    	</div>

	</div>

	<!-- upload -->
		 <div class="docs-section" id="upload"> 
                <h6 class="docs-header">Upload File</h6>
                
                <div class="row">
                <div class="seven columns" id="collection_text">
                                <div>Normally NIAS expects you to send files to a REST endpoint for the given topic (see <a href="https://github.com/nsip/nias/wiki/Workflow">NIAS Workflow</A>). File upload can be used instead, particularly if you have very large files.
		<p>You will need to flush data from the database if you want the upload to be tested correctly for duplicates

<form action="/fileupload" method="POST" enctype="multipart/form-data" id="fileuploadform">
  File: <input type="file" name="file" id="file"><br/>
  <input type="radio" name="mimetype" value="application/xml">application/xml (SIF) 
  <input type="radio" name="mimetype" value="application/json">application/json 
  <input type="radio" name="mimetype" value="text/csv" checked>text/csv <br/>
  <input type="checkbox" name="flush" >Flush all data from SMS database before uploading?<br/>

		<label for="topic_menu">Topic</label>
                    <select class="u-full-width" name="topic_menu">
                        <% @topics.sort.reject{|e| e.match( %r!.*/.*/.*! ) or e.match (%r!/errors$!) }.each do | collection | %>
                            <option value="<%= collection %>"><%= collection %></option>
                        <% end %>
                    </select>
		or: <input type="text" id="topic">/<input type="text" id="stream">


  <input  class="button-primary" type="submit" id="filesubmit">
</form>
</div>
</div>


<div class="five columns">
<h6 class="docs-header">Report</h6>
<div id="console">
<br/>
</div>
</div>

</div>

	<div class="row">
            <div class="twelve columns">
                <br/>
                <label for="results">Errors:</label>
                <pre class="code-example">
                    <code class="code-example-body prettyprint" id="results">
                    </code>
                </pre>
            </div>
        </div>

        <script>

/* counts of error per record type */
var errortypes = {};
/* for errors counted per record, whether the record has already been seen for the given error type */
var errorrecords = {};

$(function() {
  $("#fileuploadform").submit(function(e){
    $("#results").empty();
    $("#console").empty();
    e.preventDefault();
    errortypes = {};
    errorrecords = {};
    var formData = new FormData(this);
    formData.append('file', $("#file").prop('files')[0]);
    $.ajax({
      type: "POST",
      url: "/fileupload",
/*      data: $(this).serialize(),*/
      data: formData,
      processData: false,
      contentType: false,
      success: function(){
        $("#results").html("Successfully submitted</br/>")
      },
      error: function(){
        $("#results").html("Form not submitted<br/>")
      }
    });
    return false;
  });
});

/* NOT USING THIS: websockets 
 window.onload = function(){
      (function(){
        var show = function(el){
          return function(msg){ el.innerHTML = msg + '<br />' + el.innerHTML; }
        }(document.getElementById('results'));

        var ws       = new WebSocket('ws://' + window.location.host + window.location.pathname);
        ws.onopen    = function()  { $("#results").empty(); show('websocket opened'); };
        ws.onclose   = function()  { show('websocket closed'); }
        ws.onmessage = function(m) { show('websocket message: ' +  m.data); };
        var sender = function(f){
          var input     = document.getElementById('input');
          input.onclick = function(){ input.value = "" };
          f.onsubmit    = function(){
            ws.send(input.value);
            input.value = "send a message";
            return false;
          }
        }(document.getElementById('form'));
      })();
    }
*/

function xml2html(msg){
	return msg.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/, "&gt;");
}

var show = function(el){
          return function(msg){ el.innerHTML = el.innerHTML + xml2html(msg) + '<br /><br />' ; }
        }(document.getElementById('results'));

if (!!window.EventSource) {
	var source = new EventSource('csverrors');
}
source.addEventListener('message', function(e) {
	var msg = e.data;
	/* strip the header count in the error message: extract counts and type */
	var myRegexp = /^([0-9]+):([0-9]+):([0-9]+) ([^\n]+)\n/g;
	var match = myRegexp.exec(msg);
	var output;

	if(!match[3] === "0") {
		/* errors are for the whole uploaded document */
		if(!errortypes[match[4]]) {
			errortypes[match[4]] = match[2];
			output = "<div id='" + match[4] + "'>" + match[2] + " errors of type: " + match[4] + "</div>";
			document.getElementById('console').innerHTML += output;
		}
	} else {
		/* errors are for the currently processed record */
		if(!errortypes[match[4]]) {
			 document.getElementById('console').innerHTML += "<div id='" + match[4] + "'></div>";
			 errortypes[match[4]] = 0;
		}
		if(!errorrecords[match[4] + '::' + match[3]]) {
			errortypes[match[4]] += parseInt(match[2]);
			output = errortypes[match[4]] + " errors of type: " + match[4] ;
			document.getElementById(match[4]).innerHTML = output;
			errorrecords[match[4] + '::' + match[3]] = 1;
		}
	}

	msg = msg.replace(/^[^\n+]+\n/,"");
	show(msg);
}, false);


source.addEventListener('open', function(e) {
$("#results").empty(); 
$("#console").empty(); 
errortypes = {};
errorrecords = {};
}, false);


	</script>
            
        </div>

        </div>



</div>





















